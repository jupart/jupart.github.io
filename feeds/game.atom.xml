<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jupart - game</title><link href="https://jupart.github.io/" rel="alternate"></link><link href="https://jupart.github.io/feeds/game.atom.xml" rel="self"></link><id>https://jupart.github.io/</id><updated>2018-01-23T00:00:00-05:00</updated><entry><title>Attractor - a game about magnetism</title><link href="https://jupart.github.io/attractor-release.html" rel="alternate"></link><published>2018-01-23T00:00:00-05:00</published><updated>2018-01-23T00:00:00-05:00</updated><author><name>jupart</name></author><id>tag:jupart.github.io,2018-01-23:/attractor-release.html</id><summary type="html">&lt;p class="first last"&gt;A game about magnetism, made using Kivent, able to deploy to Android mobile devices&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;em&gt;The attractor floats in space. A nearby planet tugs the tiniest of tugs, the
Pull, setting the attractor on a collision course with a
multi-story facility experimenting with a new technology: monopole magnets.
Still feeling the Pull, the attractor seeks to escape the facility and meet its
final resting place at the nearest pole of the planet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Magnets are such fascinating things. They have the ability to exert force on
other objects via an invisible hand. I was working on a separate project when I
had an idea: a game where the inputs only change a magnet's pole. Attractor is
the game I made with this in mind.&lt;/p&gt;
&lt;p&gt;While associating talk of magnets with
charge is techincally incorrect, I thought it would be simpler and easier to
understand if I used the terms magnet and charge instead of electric dipole and
north and south pole, so that's what I'll use in this post.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gameplay"&gt;
&lt;h2&gt;Gameplay&lt;/h2&gt;
&lt;p&gt;In Attractor, you control the polarity of an impossibility: a monopole
magnet that can change its charge at will. Using three simple buttons on your
phone or screen you can set your attractor to positive, negative, or neutral
charge. The buttons cover the play area and are transparent, but the outline of
each button can be seen at the edge of said area. Depending on the magnets
around the attractor, it will be pulled,
pushed, or left alone to float on its current trajectory. Positive (red) repels
positive and attracts negative (blue), neutral (grey) floats.&lt;/p&gt;
&lt;p&gt;The attractor's goal is to reach the end of the current level, marked by the
hole in the floor. Each level has an ideal number of charge changes and an
ideal time taken to completion. The Reset button sends the attractor back to
the beginning of the current level.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Game Objects&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Magnet - simple stationary monopole magnet that pulls or pushes the attractor&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Magnet" class="align-center" src="images/attractor/posipole_on_first_level_with_yellow_finish.png" style="width: 324.0px; height: 576.0px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rotator - rotating Magnet&lt;/li&gt;
&lt;li&gt;Membrane - an object that lets the attractor through only if its color
matches the charge/color of the Membrane&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Membrane" class="align-center" src="images/attractor/membrane_element.png" style="width: 324.0px; height: 576.0px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Changer - an object that changes the charge/color of the attractor to match
its own&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Changer" class="align-center" src="images/attractor/changer_element.png" style="width: 324.0px; height: 576.0px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="code-stuff"&gt;
&lt;h2&gt;Code stuff&lt;/h2&gt;
&lt;p&gt;I'm an amateur programmer at best, so the &lt;a class="reference external" href="https://github.com/jupart/attractor"&gt;project&lt;/a&gt; should just serve as an
example of what you could do, not what you should do. There are some pretty
serious separation of concerns issues in the code design I would refactor out
if I had the time!&lt;/p&gt;
&lt;p&gt;Attractor uses &lt;a class="reference external" href="https://github.com/kivy/kivy"&gt;Kivy&lt;/a&gt; for its UI elements like buttons, menus, layouts, etc. Kivy
is a really awesome framework that lets you define UI stuffs in Python or its
own .kv description files.&lt;/p&gt;
&lt;p&gt;Attractor uses &lt;a class="reference external" href="https://github.com/kivy/kivent"&gt;Kivent&lt;/a&gt; as its ECS. Kivent lets you prototype systems as Python
classes and later refit them to Cython for better performance if needed. The
most important system in this game, &lt;a class="reference external" href="https://github.com/jupart/attractor/blob/develop/ChargeSystem.py"&gt;ChargeSystem.py&lt;/a&gt;, is a good example of what
you can do with Kivent.&lt;/p&gt;
&lt;p&gt;Kivent has a builtin module for using &lt;a class="reference external" href="https://github.com/tito/cymunk"&gt;Cymunk&lt;/a&gt;, which is a &lt;a class="reference external" href="https://github.com/slembcke/Chipmunk2D"&gt;Chipmunk2D&lt;/a&gt; wrapper
for Cython. Attractor uses this for collision detection and correction and to
apply forces to the attractor.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-m-kind-of-proud-of"&gt;
&lt;h2&gt;What I'm kind of proud of&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I didn't use Kivent's builtin Animation System, but instead used
&lt;tt class="docutils literal"&gt;kivy.animation&lt;/tt&gt; on simple &lt;tt class="docutils literal"&gt;kivy.graphics&lt;/tt&gt; objects like &lt;tt class="docutils literal"&gt;Ellipses&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;Rectangles&lt;/tt&gt;. This way I was able to make art changes via code by changing
the way the shapes and colors were defined.&lt;/li&gt;
&lt;li&gt;Entities were defined via &lt;a class="reference external" href="https://github.com/jupart/attractor/blob/develop/resources/entities.json"&gt;json&lt;/a&gt;. I wrote &lt;a class="reference external" href="https://github.com/jupart/attractor/blob/develop/EntityFactory.py"&gt;EntityFactory.py&lt;/a&gt; to load this file
and build Kivent entities, which let me abstract away the kind of difficult to use
Kivent &lt;tt class="docutils literal"&gt;gameworld.init_entity()&lt;/tt&gt; args.&lt;/li&gt;
&lt;li&gt;The Charge System idea, the core of the game&lt;/li&gt;
&lt;li&gt;The level editor isn't completely horrible. Levels are stored as json
files, not really anything special I think. I store a location, rotation, and
entity name that EntityFactory builds with, so there isn't any saved state of
levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-i-ran-into"&gt;
&lt;h2&gt;Issues I ran into&lt;/h2&gt;
&lt;p&gt;It is so cool to be able to make performant apps and games using Python via
Kivy and Kivent. That being said, it can be pretty painful when it comes time
to deploy.&lt;/p&gt;
&lt;p&gt;The distribution story with Python, Kivy, and Kivent (in combination) is a
little rough. I have another post about getting my development environment
going &lt;a class="reference external" href="kivent_to_android.html"&gt;here&lt;/a&gt;. In general, while &lt;tt class="docutils literal"&gt;buildozer&lt;/tt&gt; gets the job done for Android
deployment, often times it feels like a brittle tool. For example,
currently I can't put together an .apk for you to try out because of &lt;a class="reference external" href="https://github.com/kivy/buildozer/issues/312"&gt;this&lt;/a&gt; issue.&lt;/p&gt;
&lt;p&gt;Kivent is great, but the Cython/Python interaction can sometimes lead to errors
that are very hard to debug. Crashes with cryptic exception messages will be
frequent when getting started up with Kivent. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;File &amp;quot;/home/jupart/Code/Python/attractor/EntityFactory.py&amp;quot;, line 73, in create_entity_at&lt;/span&gt;
&lt;span class="go"&gt;    return self.gameworld.init_entity(new_ent_data[0], new_ent_data[1])&lt;/span&gt;
&lt;span class="go"&gt;File &amp;quot;kivent_core/gameworld.pyx&amp;quot;, line 428, in kivent_core.gameworld.GameWorld.init_entity (kivent_core/gameworld.c:8899)&lt;/span&gt;
&lt;span class="go"&gt;File &amp;quot;kivent_core/managers/system_manager.pyx&amp;quot;, line 163, in kivent_core.managers.system_manager.SystemManager.__getitem__ (kivent_core/managers/system_manager.c:2441)&lt;/span&gt;
&lt;span class="go"&gt;    IndexError: list index out of range&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yikes! Make sure when you call &lt;tt class="docutils literal"&gt;self.gameworld.init_entity(components, component_order)&lt;/tt&gt;,
that all of the components' names are right and are in the right order! It's a
common error until you set up something like an EntityFactory which abstracts
that bit away.&lt;/p&gt;
&lt;p&gt;If you run into crashes when running your app on your device, &lt;tt class="docutils literal"&gt;buildozer android logcat&lt;/tt&gt;
(or the &lt;tt class="docutils literal"&gt;adb&lt;/tt&gt; equivalent) is a useful tool for getting debug information on
what's causing the crash. I fooled around for a while trying to fix a crash
that was caused by one of my music tracks being 24-bit .wav (or something like
that). Getting debug via &lt;tt class="docutils literal"&gt;logcat&lt;/tt&gt; and re-encoding the tracks to 16-bit .wav
did the trick.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="current-status"&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;This project has sat for a while. I started it in May 2017 and haven't touched
it since October 2017. I wrote the program, made the art, and wrote/performed
the music myself. The menu design
and general UI could use a bit of work, but overall I think the game is fun and
I like where the project stands today. All told, there are 16 levels in sets of
4 where each set focuses on a new game element. I hope the project serves as an
example of what you can accomplish with Python/Kivy/Kivent on mobile and
desktop machines.&lt;/p&gt;
&lt;p&gt;I don't plan on updating the game any time soon, so I've released the code and
art on Github under the MIT license.&lt;/p&gt;
&lt;p&gt;The music tracks are also on Github, but I reserve rights to
those. Feel free to install on your own device to try out the game or download
and listen to the tracks, though. If I can get the &lt;tt class="docutils literal"&gt;buildozer&lt;/tt&gt; script working
again I'll probably put up a Github release for the .apk, too.&lt;/p&gt;
&lt;/div&gt;
</content><category term="kivent"></category><category term="python"></category><category term="buildozer"></category><category term="kivy"></category><category term="android"></category><category term="cymunk"></category></entry></feed>